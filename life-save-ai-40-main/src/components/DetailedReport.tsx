import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { InteractiveSymptomSelector } from "./InteractiveSymptomSelector";
import { 
  FileText, 
  Download, 
  Calendar, 
  User, 
  Activity, 
  AlertTriangle,
  CheckCircle,
  Clock,
  X
} from "lucide-react";

interface DetailedReportProps {
  isOpen: boolean;
  onClose: () => void;
  patientData?: {
    name?: string;
    age?: number;
    condition?: string;
    confidence?: number;
  };
}

export function DetailedReport({ isOpen, onClose, patientData }: DetailedReportProps) {
  if (!isOpen) return null;

  const mockReport = {
    reportId: "RPT-2024-001234",
    dateGenerated: new Date().toLocaleDateString(),
    patientName: patientData?.name || "Sample Patient",
    age: patientData?.age || 35,
    analysisDate: new Date().toLocaleDateString(),
    primaryCondition: patientData?.condition || "Common Cold",
    confidence: patientData?.confidence || 85,
    symptoms: [
      { name: "Runny nose", severity: "Moderate", duration: "3 days", selected: true },
      { name: "Sore throat", severity: "Mild", duration: "2 days", selected: true },
      { name: "Fatigue", severity: "Mild", duration: "4 days", selected: true },
      { name: "Low fever", severity: "Low", duration: "1 day", selected: true }
    ],
    vitalSigns: {
      temperature: "99.2°F",
      oxygenSaturation: "98%"
    },
    recommendations: {
      immediate: [
        "Get adequate rest (8-10 hours of sleep)",
        "Stay hydrated with warm fluids",
        "Use over-the-counter pain relievers as needed",
        "Isolate to prevent spreading infection"
      ],
      followUp: [
        "Monitor symptoms for 7-10 days",
        "Seek medical attention if fever exceeds 102°F",
        "Return if breathing difficulties develop",
        "Schedule follow-up if symptoms worsen"
      ]
    },
    riskFactors: [
      { factor: "Seasonal exposure", level: "Moderate" },
      { factor: "Stress levels", level: "Low" },
      { factor: "Sleep quality", level: "Good" }
    ]
  };

  const downloadReport = () => {
    // In a real app, this would generate and download a PDF
    const reportContent = `
HEALTH ANALYSIS REPORT
Report ID: ${mockReport.reportId}
Date: ${mockReport.dateGenerated}

PATIENT INFORMATION
Name: ${mockReport.patientName}
Age: ${mockReport.age}
Analysis Date: ${mockReport.analysisDate}

PRIMARY DIAGNOSIS
Condition: ${mockReport.primaryCondition}
Confidence Level: ${mockReport.confidence}%

SYMPTOMS ANALYSIS
${mockReport.symptoms.map(s => `- ${s.name} (${s.severity}) - Duration: ${s.duration}`).join('\n')}

RECOMMENDATIONS
${mockReport.recommendations.immediate.map(r => `- ${r}`).join('\n')}

FOLLOW-UP CARE
${mockReport.recommendations.followUp.map(r => `- ${r}`).join('\n')}

This report is generated by AI and should not replace professional medical advice.
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `health-report-${mockReport.reportId}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="fixed inset-0 z-50 bg-black/50 backdrop-blur-sm">
      <div className="fixed inset-4 md:inset-8 bg-background rounded-xl shadow-2xl overflow-hidden">
        <div className="flex flex-col h-full">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b bg-gradient-primary text-white">
            <div className="flex items-center space-x-3">
              <FileText className="h-6 w-6" />
              <div>
                <h2 className="text-xl font-bold">Detailed Health Report</h2>
                <p className="text-sm opacity-90">Report ID: {mockReport.reportId}</p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={downloadReport}
                className="text-white hover:bg-white/20"
              >
                <Download className="h-4 w-4 mr-2" />
                Download
              </Button>
              <Button
                variant="ghost"
                size="icon"
                onClick={onClose}
                className="text-white hover:bg-white/20"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>

          {/* Content */}
          <div className="flex-1 overflow-y-auto p-6">
            <div className="max-w-4xl mx-auto space-y-6">
              {/* Patient Info */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card>
                  <CardHeader className="pb-3">
                    <CardTitle className="flex items-center text-sm">
                      <User className="h-4 w-4 mr-2 text-primary" />
                      Patient Information
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Name:</span>
                      <span className="font-medium">{mockReport.patientName}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Age:</span>
                      <span className="font-medium">{mockReport.age} years</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Analysis Date:</span>
                      <span className="font-medium">{mockReport.analysisDate}</span>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="pb-3">
                    <CardTitle className="flex items-center text-sm">
                      <Activity className="h-4 w-4 mr-2 text-success" />
                      Vital Signs
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Temperature:</span>
                      <span className="font-medium">{mockReport.vitalSigns.temperature}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Oxygen Saturation:</span>
                      <span className="font-medium">{mockReport.vitalSigns.oxygenSaturation}</span>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Primary Diagnosis */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <span className="flex items-center">
                      <CheckCircle className="h-5 w-5 mr-2 text-success" />
                      Primary Diagnosis
                    </span>
                    <Badge variant="secondary" className="bg-success/10 text-success">
                      {mockReport.confidence}% Confidence
                    </Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <h3 className="text-xl font-semibold text-primary mb-2">
                    {mockReport.primaryCondition}
                  </h3>
                  <p className="text-muted-foreground">
                    Based on the analysis of reported symptoms and AI evaluation, this condition 
                    shows the highest probability match with a confidence level of {mockReport.confidence}%.
                  </p>
                </CardContent>
              </Card>

              {/* Interactive Symptom Selector */}
              <InteractiveSymptomSelector 
                initialSymptoms={mockReport.symptoms}
                onSymptomsChange={(updatedSymptoms) => {
                  // Handle symptom changes if needed
                  console.log('Symptoms updated:', updatedSymptoms);
                }}
              />

              {/* Symptoms Analysis */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <AlertTriangle className="h-5 w-5 mr-2 text-warning" />
                    Symptoms Analysis
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {mockReport.symptoms.map((symptom, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-muted/50 rounded-lg">
                        <div>
                          <div className="font-medium">{symptom.name}</div>
                          <div className="text-sm text-muted-foreground">Duration: {symptom.duration}</div>
                        </div>
                        <Badge 
                          variant={symptom.severity === 'Moderate' ? 'default' : 'secondary'}
                          className={symptom.severity === 'Moderate' ? 'bg-warning/10 text-warning' : ''}
                        >
                          {symptom.severity}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Recommendations */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center text-info">
                      <Clock className="h-5 w-5 mr-2" />
                      Immediate Care
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {mockReport.recommendations.immediate.map((rec, index) => (
                        <li key={index} className="flex items-start">
                          <CheckCircle className="h-4 w-4 text-success mr-2 mt-0.5 flex-shrink-0" />
                          <span className="text-sm">{rec}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center text-secondary">
                      <Calendar className="h-5 w-5 mr-2" />
                      Follow-up Care
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {mockReport.recommendations.followUp.map((rec, index) => (
                        <li key={index} className="flex items-start">
                          <CheckCircle className="h-4 w-4 text-secondary mr-2 mt-0.5 flex-shrink-0" />
                          <span className="text-sm">{rec}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              </div>

              {/* Risk Factors */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <AlertTriangle className="h-5 w-5 mr-2 text-warning" />
                    Risk Assessment
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {mockReport.riskFactors.map((risk, index) => (
                      <div key={index} className="flex items-center justify-between">
                        <span>{risk.factor}</span>
                        <Badge 
                          variant={risk.level === 'Good' ? 'default' : 'secondary'}
                          className={
                            risk.level === 'Good' 
                              ? 'bg-success/10 text-success' 
                              : risk.level === 'Moderate'
                              ? 'bg-warning/10 text-warning'
                              : ''
                          }
                        >
                          {risk.level}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Disclaimer */}
              <Card className="border-warning/50 bg-warning/5">
                <CardContent className="pt-6">
                  <div className="flex items-start space-x-3">
                    <AlertTriangle className="h-5 w-5 text-warning mt-0.5" />
                    <div>
                      <h4 className="font-semibold text-warning mb-2">Important Medical Disclaimer</h4>
                      <p className="text-sm text-muted-foreground">
                        This AI-generated report is for informational purposes only and does not constitute 
                        medical advice, diagnosis, or treatment. Always consult with qualified healthcare 
                        professionals for proper medical evaluation, diagnosis, and treatment decisions. 
                        Do not rely solely on this report for medical decisions.
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}